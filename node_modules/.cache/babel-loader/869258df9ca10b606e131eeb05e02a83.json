{"ast":null,"code":"const $useGet = (url = '', callback) => {\n  // const [result, setResult] = useState();\n  // const [data, setData] = useState([]);\n  // const [loading, setLoading] = useState(true);\n  let result = 'Fail';\n  let data = [];\n  let loading = true; // const async = (url, callback) => {\n\n  fetch(url).then(res => {\n    if (res.status !== 200) {\n      console.error(`${url} Server Error`);\n      return;\n    }\n\n    return res.json();\n  }).then(resData => {\n    // setResult('Success');\n    // setData(resData);\n    // setLoading(false);\n    result = 'Success';\n    data = resData;\n    loading = false;\n    callback( // {result, data, loading}\n    'Success');\n  }).catch(error => {\n    // setResult('Fail');\n    // setData(null);\n    // setLoading(true);\n    result = 'Fail';\n    data = null;\n    loading = true;\n  });\n};\n\nexport default $useGet;","map":{"version":3,"sources":["C:/Users/jsw93/OneDrive/바탕 화면/WorkLog/src/hook/useGet.jsx"],"names":["$useGet","url","callback","result","data","loading","fetch","then","res","status","console","error","json","resData","catch"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAACC,GAAG,GAAG,EAAP,EAAWC,QAAX,KAAwB;AACtC;AACA;AACA;AACA,MAAIC,MAAM,GAAG,MAAb;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,OAAO,GAAG,IAAd,CANsC,CAQtC;;AACEC,EAAAA,KAAK,CAACL,GAAD,CAAL,CAAWM,IAAX,CAAgBC,GAAG,IAAI;AACrB,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBC,MAAAA,OAAO,CAACC,KAAR,CAAe,GAAEV,GAAI,eAArB;AACA;AACD;;AACD,WAAOO,GAAG,CAACI,IAAJ,EAAP;AACD,GAND,EAMGL,IANH,CAMQM,OAAO,IAAI;AACjB;AACA;AACA;AACAV,IAAAA,MAAM,GAAG,SAAT;AACAC,IAAAA,IAAI,GAAGS,OAAP;AACAR,IAAAA,OAAO,GAAG,KAAV;AACAH,IAAAA,QAAQ,EACN;AACA,aAFM,CAAR;AAKD,GAlBD,EAkBGY,KAlBH,CAkBUH,KAAD,IAAW;AAClB;AACA;AACA;AACAR,IAAAA,MAAM,GAAG,MAAT;AACAC,IAAAA,IAAI,GAAG,IAAP;AACAC,IAAAA,OAAO,GAAG,IAAV;AAED,GA1BD;AA2BH,CApCD;;AAsCA,eAAeL,OAAf","sourcesContent":["const $useGet = (url = '', callback) => {\r\n  // const [result, setResult] = useState();\r\n  // const [data, setData] = useState([]);\r\n  // const [loading, setLoading] = useState(true);\r\n  let result = 'Fail';\r\n  let data = [];\r\n  let loading = true;\r\n  \r\n  // const async = (url, callback) => {\r\n    fetch(url).then(res => {\r\n      if (res.status !== 200) {\r\n        console.error(`${url} Server Error`);\r\n        return;\r\n      }\r\n      return res.json();\r\n    }).then(resData => {\r\n      // setResult('Success');\r\n      // setData(resData);\r\n      // setLoading(false);\r\n      result = 'Success';\r\n      data = resData;\r\n      loading = false;\r\n      callback(\r\n        // {result, data, loading}\r\n        'Success'\r\n      );\r\n\r\n    }).catch((error) => {\r\n      // setResult('Fail');\r\n      // setData(null);\r\n      // setLoading(true);\r\n      result = 'Fail';\r\n      data = null;\r\n      loading = true;\r\n\r\n    });\r\n}\r\n\r\nexport default $useGet;"]},"metadata":{},"sourceType":"module"}